import React, { useState, useEffect } from 'react';
import '../styles.css';
import useWebSocket from 'react-use-websocket';

function TradeForm() {
  const initialBalance = 100;
  const leverage = 50; // –ü–ª–µ—á–æ x50
  const [balance, setBalance] = useState(initialBalance);
  const [btcPrice, setBtcPrice] = useState(0);
  const [inputAmount, setInputAmount] = useState('');
  const [showBalance, setShowBalance] = useState(true);
  const [trades, setTrades] = useState([]);

  const socketUrl = 'wss://stream.binance.com:9443/ws/btcusdt@trade';
  const {
    lastMessage,
  } = useWebSocket(socketUrl, {
    onOpen: () => console.log('WebSocket Connected'),
    shouldReconnect: (closeEvent) => true,
  });

  useEffect(() => {
    if (lastMessage !== null && lastMessage.data) {
      const messageData = JSON.parse(lastMessage.data);
      setBtcPrice(parseFloat(messageData.p));
    }
  }, [lastMessage]);

  // –î–æ–±–∞–≤–ª—è–µ–º useEffect –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã BTC
  useEffect(() => {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞ –≤ –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–µ
    const updateProfitForTrades = () => {
      setTrades((prevTrades) => {
        return prevTrades.map((trade) => {
          if (trade.close) {
            return trade;
          }
          const btcValue = btcPrice * trade.btcAmount;
          if (trade.type === 'LONG') {
            // –ü—Ä–∏–±—ã–ª—å –¥–ª—è –¥–ª–∏–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            trade.profit = (btcValue - trade.amount).toFixed(2);
          } else {
            // –ü—Ä–∏–±—ã–ª—å –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏
            trade.profit = (trade.amount - btcValue).toFixed(2);
          }
          return trade;
        });
      });
    };

    updateProfitForTrades();
  }, [btcPrice]);

  const handleTrade = (type) => {
    const amount = parseFloat(inputAmount);
    if (isNaN(amount) || amount <= 0 || amount > balance) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏.');
      return;
    }

    const tradeValue = amount * leverage; // –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –≤ USDT —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞ x50
    const btcValue = tradeValue / btcPrice; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC, –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –Ω–∞ —Å—É–º–º—É USDT
    const newBalance = balance - amount; // –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏
    setBalance(newBalance);
    const newTrade = {
      type: type,
      amount: tradeValue.toFixed(2), // –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –≤ USDT
      btcAmount: btcValue.toFixed(6), // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC
      status: '–û—Ç–∫—Ä—ã—Ç–æ',
      close: false,
      profit: '0.00', // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏
      leverage: leverage,
      openingPrice: btcPrice,
    };
    setTrades([...trades, newTrade]);
    setInputAmount('');
  };

  const handleClose = (index) => {
    const closedTrade = trades[index];
    const closeBtcValue = btcPrice * closedTrade.btcAmount; // –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤ USDT
  
    // –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    const priceChangePercentage = ((closeBtcValue - closedTrade.amount) / closedTrade.amount) * 100;
  
    // –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–ª–µ—á–∞
    const leverageFee = 1 - (closedTrade.leverage / 100);
    let profitOrLoss;
  
    // –ï—Å–ª–∏ —Ç–∏–ø —Å–¥–µ–ª–∫–∏ LONG (–ø–æ–∫—É–ø–∫–∞)
    if (closedTrade.type === 'LONG') {
      profitOrLoss = ((priceChangePercentage * closedTrade.amount * leverageFee) / 100).toFixed(2);
    } else {
      // –ï—Å–ª–∏ —Ç–∏–ø —Å–¥–µ–ª–∫–∏ SHORT (–ø—Ä–æ–¥–∞–∂–∞)
      profitOrLoss = -((priceChangePercentage * closedTrade.amount * leverageFee) / 100).toFixed(2);
    }
  
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    const newBalance = balance + parseFloat(profitOrLoss) + (closedTrade.amount / closedTrade.leverage);
  
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
    setBalance(newBalance);
    const updatedTrades = trades.map((trade, i) =>
      i === index ? { ...trade, status: '–ó–∞–∫—Ä—ã—Ç–æ', close: true, profit: profitOrLoss } : trade
    );
    setTrades(updatedTrades);
  };
  

  const formatBalance = () => {
    const btcValue = (balance / btcPrice).toFixed(6);
    return `(${balance.toFixed(2)}$ ‚âà ${btcValue} BTC)`;
  };

  return (
    <div className="trade-form">
      <h2>–§—å—é—á–µ—Ä—Å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–∞ BTC/USDT</h2>
      <p>
        –ü–ª–µ—á–æ: x{leverage}
      </p>
      –¶–µ–Ω–∞ BTC: {btcPrice.toFixed(2)}$
      <div>
        <input
          className='input-field'
          type="number"
          placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USDT"
          value={inputAmount}
          onChange={(e) => setInputAmount(e.target.value)}
        />
      </div>
      <div className="buttons-container">
        <button className="long-button" onClick={() => handleTrade('LONG')}>
          LONG
        </button>
        <button className="short-button" onClick={() => handleTrade('SHORT')}>
          SHORT
        </button>
      </div>
      <p>
        <br />
        –ë–∞–ª–∞–Ω—Å: {showBalance ? <span className="visible">{formatBalance()}</span> : '***'}
        <span className="toggle-eye" onClick={() => setShowBalance(!showBalance)}>
          {showBalance ? 'üëÅÔ∏è' : 'üëÅÔ∏è'}
        </span>
      </p>
      <table className="trade-table">
        <thead>
          <tr>
            <th>–¢–∏–ø</th>
            <th>–°—É–º–º–∞ (USDT)</th>
            <th>–¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è</th>
            <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC</th>
            <th>–°—Ç–∞—Ç—É—Å</th>
            <th>–ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫ (USDT)</th>
            <th>–ó–∞–∫—Ä—ã—Ç—å</th>
          </tr>
        </thead>
        <tbody>
          {trades.map((trade, index) => (
            <tr key={index}>
              <td>{trade.type}</td>
              <td>{trade.amount}</td>
              <td>{trade.openingPrice.toFixed(2)}</td> 
              <td>{trade.btcAmount}</td>
              <td>{trade.status}</td>
              <td>{trade.profit}</td> {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–¥–µ–ª–∫–∏ */}
              <td>{!trade.close && <button onClick={() => handleClose(index)}>–ó–∞–∫—Ä—ã—Ç—å</button>}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default TradeForm;
